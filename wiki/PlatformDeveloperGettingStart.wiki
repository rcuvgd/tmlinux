#labels Featured
<wiki:toc max_depth="3" />

= Introduction =

This page describes how to compile the whole platform of tmlinux (includding linux kernel, uclibc and so on) and how to populate sysroot for application developer.

= Details =

==Preparation==
===0. Environment setup==
In the following section, let's suppose the workdir is _*/home/guohr/worktest*_ and the TCS installation directory is _*/opt/NXP/TCS510*_
 
===1. Get and Install TCS Linux edition===
First of all, you should install TCS Linux edition on your Linux machines. Please goto [http://www.tcshelp.com] to get it. Of course, you should have the license for it. 
In the following section, let's suppose the installation directory of your TCS is _*/opt/NXP/TCS510/*_

To make sure the TCS tools(such as tmcc, tmld) are in the PATH environment
  {{{
export PATH=$PATH:/opt/NXP/TCS510/bin/
  }}}
  {{{
guohr@ghr-notebook-02:~/worktest> tmcc -V
tmcc: V7.1.0 of TCS V5.1(0042rc6_Linux)
tmcc warning : no work
  }}}


===2. Install CIL (C intermedia language)===
Note that: before continuing, you need to make sure you have installed OCaml language compiler. OCaml can be downloaded from http://caml.inria.fr/ocaml/. After downloading and unpacking the source distribution, in the ocaml directory, do:
  {{{
./configure
make world
make opt
make install
  }}}

Before building Linux kernel image, you need to setup and install cil in your Linux machine, which is used to process GNU C extension options when compiling Linux kernel.
  
Use the following command to check it out and compile, setup it.
  {{{
svn checkout http://tmlinux.googlecode.com/svn/trunk/cil
cd cil/
./configure
make  
export PATH=$PATH:/home/guohr/worktest/cil/obj/x86_LINUX/
  }}}

To validate the environment, type the following command and you will get the following message:
{{{
guohr@ghr-notebook-01:~/worktest/cil> cilly.asm.exe

Error: No arguments for CIL

Fatal error: exception Errormsg.Error
}}}

==Build Linux Kernel==
===1. checkout Linux kernel of tmlinux===
Download Linux kernel of tmlinux using the following command: (DO NOT forget to verify it using md5sum)
{{{
wget -c http://tmlinux.googlecode.com/files/linux-2.6.14-tmlinux-1.0.tar.bz2 
}}}

Unpack the Linux kernel
{{{
tar xvfjp linux-2.6.14-tmlinux-1.0.tar.bz2
mv linux-2.6.14-tmlinux-1.0 linux
}}}

===2. Configure Linux kernel===
First configure the linux kernel using default configuration files by the following command (at *_/home/guohr/worktest/linux/_* directory).

*To compile kernel for PNX1500 simulator*
{{{
make sim1500_defconfig
}}}
*To compile kernel for PNX1005 simulator*
{{{
make sim1005_defconfig
}}}
*To compile kernel for MBE1500*
{{{
make mbe1500_defconfig
}}}

Then adjust the configuration if necessary by the following command
{{{
make menuconfig
}}}

===3. Build Linux kernel===
To build linux kernel image, use the following command at *_/home/guohr/worktest/linux_*:
{{{
make
}}}

After building kernel, the `TMLinux-pnx1500-*-el.out` at _/home/guohr/worktest/linux/arch/trimedia/boot/_ is the executable Linux kernel image.

==Build uClibc and generate sysroot==
===1. Checkout sysroots and uClibc===
Checkout sysroots and uClibc using the following commands:
{{{
svn checkout http://tmlinux.googlecode.com/svn/trunk/sysroots
svn checkout http://tmlinux.googlecode.com/svn/trunk/uClibc
}}}

===2. Setup TCS for tmlinux build environment===
To create the whole TCS environment for building tmlinux uClibc and applications, you need to goto *_sysroots/sysroots/tcs/5.1.0_* and then use the following command:
{{{
cd /home/guohr/worktest/sysroots/tcs/5.1.0
TCS=/opt/NXP/TCS510 ./creat-tcs.sh
}}}
Please set TCS using your TCS installation path (In the above example, it is *_/opt/NXP/TCS510_*).

===3. Configure, build and install uClibc===
To build uClibc, you need to set the following configuration options correctly using the following command:
{{{
make menuconfig
}}}

====TCS include search path====
{{{
Target Architecture Features and Options -> tmcc compiler include search path
}}}
In this example, it is *_/home/guohr/worktest/sysroots/tcs/5.1.0_*

====Linux location====
{{{
Target Architecture Features and Options -> Linux Kernel header location
}}}
In this example, it is *_/home/guohr/worktest/linux_*

====uClibc installation directories====
{{{
Libary Installation Options -> uClibc runtime library directory
}}}
for pnx1500 simulator, it is *_/home/guohr/worktest/sysroots/pnx1500_ttisim_uclibc/sysroot_*; for pnx1005 simulator, it is *_/home/guohr/worktest/sysroots/pnx1005_ttisim_uclibc/sysroot_*; for pnx1500 standalone board, it is *_/home/guohr/worktest/sysroots/pnx1500_nohost_uclibc/sysroot_*;
{{{
Libary Installation Options -> uClibc development environment directory
}}}
for pnx1500 simulator, it is *_/home/guohr/worktest/sysroots/pnx1500_ttisim_uclibc/sysroot/usr_*; for pnx1005 simulator, it is *_/home/guohr/worktest/sysroots/pnx1005_ttisim_uclibc/sysroot/usr_*; for pnx1500 standalone board, it is *_/home/guohr/worktest/sysroots/pnx1500_nohost_uclibc/sysroot/usr_*;

Build and install uClibc using the following commands:
{{{
make 
make install
}}}


After installing uClibc, it is the time to deliver sysroots to application developers:
For how to build applications, please refer ApplicationDeveloperGettingStart;
For how to build busybox, please refer BusyboxBuildingGuide.